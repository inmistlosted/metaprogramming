{
  "TabsAndIndents": {
    "UseTabsCharacter": false,
    "TabSize": 4,
    "Indent": 4,
    "ContinuationIndent": 4,
    "KeepIndentsOnEmptyLines": false,
    "IndentChainedMethod": false,
    "IndentAllChainedCallsInAGroup": false
  },

  "Spaces": {
    "BeforeParentheses": {
      "FunctionDeclarationParentheses": false,
      "FunctionCallParentheses": false,
      "IfParentheses": true,
      "ForParentheses": true,
      "WhileParentheses": true,
      "SwitchParentheses": true,
      "CatchParentheses": true,
      "InFunctionExpression": true,
      "InAsyncArrowFunction": true
    },
    "AroundOperators": {
      "AssignmentOperators": true,
      "LogicalOperators": true,
      "EqualityOperators": true,
      "RelationOperators": true,
      "BitwiseOperators": true,
      "AdditiveOperators": true,
      "MultiplicativeOperators": true,
      "ShiftOperators": true,
      "UnaryAdditiveOperators": false,
      "ArrowFunction": true,
      "BeforeUnaryNot": false,
      "AfterUnaryNot": false
    },
    "BeforeLeftBrace": {
      "FunctionLeftBrace": true,
      "IfLeftBrace": true,
      "ElseLeftBrace": true,
      "ForLeftBrace": true,
      "WhileLeftBrace": true,
      "DoLeftBrace": true,
      "SwitchLeftBrace": true,
      "TryLeftBrace": true,
      "CatchLeftBrace": true,
      "FinallyLeftBrace": true,
      "ClassLeftBrace": true
    },
    "BeforeKeywords": {
      "ElseKeyword": true,
      "WhileKeyword": true,
      "CatchKeyword": true,
      "FinallyKeyword": true
    },
    "Within": {
      "IndexAccessBrackets": false,
      "GroupingParentheses": false,
      "FunctionDeclarationParentheses": false,
      "FunctionCallParentheses": false,
      "IfParentheses": false,
      "ForParentheses": false,
      "WhileParentheses": false,
      "SwitchParentheses": false,
      "CatchParentheses": false,
      "ObjectLiteralBraces": false,
      "ES6ImportExportBraces": false,
      "ArrayBraces": false,
      "InterpolationExpressions": false
    },
    "InTernaryOperator": {
      "BeforeQuestionMark": true,
      "AfterQuestionMark": true,
      "BeforeDoublePoints": true,
      "AfterDoublePoints": true
    },
    "Other": {
      "BeforeComma": false,
      "AfterComma": true,
      "BeforeForSemicolon": false,
      "BeforePropertyNameValueSeparator": false,
      "AfterPropertyNameValueSeparator": true,
      "AfterTriplePointsInRestSpread": false,
      "BeforeMultiplicationInGenerator": false,
      "AfterMultiplicationInGenerator": true
    },
    "InFlow": {
      "BeforeTypeReferenceColon": false,
      "AfterTypeReferenceColon": true,
      "ObjectLiteralTypeBraces": true,
      "UnionAndIntersectionTypes": true
    }
  },

  "WrappingAndBraces": {
    "KeepWhenReformatting": {
      "LineBreaks": true,
      "CommentsAtFirstColumn": true,
      "SimpleBlocksInOneLine": false,
      "SimpleMethodsInOneLine": false
    },
    "Comments": {
      "WrapAtRightMargin": false,
      "AlignMultiline": false
    },
    "BracesPlacement": {
      "InClassDeclaration": "Next line shifted",
      "InFunctionDeclaration": "End of line",
      "InFunctionExpression": "End of line",
      "Other": "End of line"
    },
    "ExtendsList": {
      "Wrap": "Do not wrap",
      "AlignWhenMultiline": false
    },
    "ExtendsKeyword": {
      "Wrap": "Do not wrap"
    },
    "FunctionDeclarationParameters": {
      "Wrap": "Do not wrap",
      "AlignWhenMultiline": true,
      "NewLineAfterLeftParenthesis": false,
      "PlaceRightParenthesisOnNewLine": false
    },
    "FunctionCallArguments": {
      "Wrap": "Do not wrap",
      "AlignWhenMultiline": false,
      "TakePriorityOverCallChainWrapping": false,
      "NewLineAfterLeftParenthesis": false,
      "PlaceRightParenthesisOnNewLine": false
    },
    "ChainedMethodsCalls": {
      "Wrap": "Do not wrap",
      "AlignWhenMultiline": true,
      "PointOnNewLine": true
    },
    "IfStatement": {
      "ForceBraces": "Do not force",
      "ElseOnNewLine": false,
      "SpecialElseIfTreatment": true
    },
    "ForStatement": {
      "Wrap": "Do not wrap",
      "AlignWhenMultiline": true,
      "NewLineAfterLeftParenthesis": false,
      "PlaceRightParenthesisOnNewLine": false,
      "ForceBraces": "Do not force"
    },
    "WhileStatement": {
      "ForceBraces": "Do not force"
    },
    "DoWhileStatement": {
      "ForceBraces": "Do not force",
      "WhileOnNewLine": false
    },
    "SwitchStatement": {
      "IndentCaseBranches": true
    },
    "TryStatement": {
      "CatchOnNewLine": false,
      "FinallyOnNewLine": false
    },
    "BinaryExpressions": {
      "Wrap": "Wrap if long",
      "AlignWhenMultiline": false,
      "OperationSignOnNextLine": false,
      "NewLineAfterLeftParenthesis": false,
      "PlaceRightParenthesisOnNewLine": false
    },
    "AssignmentStatement": {
      "Wrap": "Do not wrap",
      "AssignmentSignOnNextLine": false
    },
    "TernaryOperation": {
      "Wrap": "Do not wrap",
      "AlignWhenMultiline": false,
      "QuestionMarkAndColonSignsOnNextLine": false
    },
    "Arrays": {
      "Wrap": "Do not wrap",
      "AlignWhenMultiline": false,
      "NewLineAfterLeftBracket": false,
      "PlaceRightBracketOnNewLine": false
    },
    "Objects": {
      "Wrap": "Do not wrap",
      "Align": "Do not align"
    },
    "VariableDeclarations": {
      "Wrap": "Wrap if long",
      "Align": "Do not align"
    },
    "ES6ImportExport": {
      "Wrap": "Chop down if long",
      "AlignFromClauses": false
    }
  },

  "BlankLines": {
    "KeepMaximumBlackLines": {
      "InCode": 2
    },
    "MinimumBlackLines": {
      "AfterImports": 1,
      "AroundClass": 1,
      "AroundField": 0,
      "AroundMethod": 1,
      "AroundFunction": 1
    }
  },

  "Punctuation": {
    "SemicolonToTerminateStatements": {
      "Use": true,
      "Always": false
    },
    "Quotes": {
      "Single": false,
      "Always": false
    },
    "TrailingComma": "Keep"
  }
}